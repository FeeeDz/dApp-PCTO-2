{"version":3,"sources":["webpack://matic-plasma/webpack/bootstrap","webpack://matic-plasma/./src/constant.ts","webpack://matic-plasma/./src/contracts/deposit_manager.ts","webpack://matic-plasma/./src/contracts/erc20_predicate.ts","webpack://matic-plasma/./src/contracts/index.ts","webpack://matic-plasma/./src/contracts/registry.ts","webpack://matic-plasma/./src/contracts/withdraw_manager.ts","webpack://matic-plasma/./src/enums/index.ts","webpack://matic-plasma/./src/enums/log_event_signature.ts","webpack://matic-plasma/./src/erc20.ts","webpack://matic-plasma/./src/erc721.ts","webpack://matic-plasma/./src/index.ts","webpack://matic-plasma/./src/plasma_token.ts","webpack://matic-plasma/external \"@maticnetwork/maticjs\""],"names":[],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAO,IAAM,8BAA8B,GAAG,4CAA4C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApB;AAGvE;IAAoC,kCAA8B;IAE9D,wBAAY,MAAgD,EAAE,OAAe;eACzE,kBACI;YACI,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,gBAAgB;SACzB,EACD,MAAM,CACT;IACL,CAAC;IAED,sBAAI,mCAAO;aAAX;YACI,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QACtC,CAAC;;;OAAA;IAEL,qBAAC;AAAD,CAAC,CAjBmC,+DAAS,GAiB5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBsE;AAIvE;IAAkC,gCAA8B;IAE5D,sBAAY,MAAgD,EAAE,OAAe,EAAE,YAAoB;eAC/F,kBACI;YACI,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,YAAY;SACrB,EACD,MAAM,CACT;IACL,CAAC;IAEL,mBAAC;AAAD,CAAC,CAbiC,+DAAS,GAa1C;;;;;;;;;;;;;;ACjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACA;AACP;AACQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHoC;AAIvE;IAAsC,oCAA8B;IAEhE,0BAAY,MAAgD,EAAE,OAAe;eACzE,kBACI;YACI,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,UAAU;SACnB,EACD,MAAM,CACT;IACL,CAAC;IAEL,uBAAC;AAAD,CAAC,CAbqC,+DAAS,GAa9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB8G;AAI/G;IAAqC,mCAA8B;IAE/D,yBAAY,MAAgD,EAAE,OAAe;eACzE,kBACI;YACI,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,iBAAiB;SAC1B,EACD,MAAM,CACT;IACL,CAAC;IAED,sCAAY,GAAZ,UAAa,MAAyB,EAAE,MAA2B;QAAnE,iBAWC;QAVG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAI,MAA0B,CAAC;YAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;aACzD;iBACI;gBACD,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;aACpD;YACD,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,sBAAC;AAAD,CAAC,CA1BoC,+DAAS,GA0B7C;;;;;;;;;;;;;;AC9BD;AAAA;AAAA;AAAA;AAAsC;;;;;;;;;;;;;ACAtC;AAAA;AAAA,IAAY,0BAGX;AAHD,WAAY,0BAA0B;IAClC,0HAA4F;IAC5F,2HAA6F;AACjG,CAAC,EAHW,0BAA0B,KAA1B,0BAA0B,QAGrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHuL;AAC5H;AACP;AAER;AAE7C;IAA2B,yBAAW;IAElC,eACI,YAAoB,EACpB,QAAiB,EACjB,MAAgD,EAChD,SAAiC;QAJrC,iBAcC;QARG,IAAM,YAAY,GAAG,YAAY,KAAK,wEAA8B,CAAC;QACrE,IAAM,kBAAkB,GAAG,YAAY,CAAC,CAAC;YACrC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC;QAC3B,0BAAM;YACF,QAAQ;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,kBAAkB;SAC3B,EAAE,MAAM,EAAE,SAAS,CAAC,SAAC;;IAC1B,CAAC;IAED,4BAAY,GAAZ;QACI,OAAO,IAAI,CAAC,cAAc,CACtB,gBAAgB,EAChB,gBAAgB,EAChB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CACpC,CAAC;IACN,CAAC;IAGD,0BAAU,GAAV,UAAW,WAAmB,EAAE,MAA+B;QAA/D,iBAQC;QAR+B,oCAA+B;QAC3D,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,CACd,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,4BAAY,GAAZ,UAAa,WAAmB,EAAE,MAAwC;QAA1E,iBAWC;QAXiC,oCAAwC;QACtE,IAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAE7C,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,EACX,cAAc,IAAI,KAAI,CAAC,kBAAkB,EAAE,CAAC,cAAc,CAAC,OAAO,CACrE,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uBAAO,GAAP,UAAQ,MAAmB,EAAE,MAAsC;QAAnE,iBAgBC;QAhB4B,oCAAsC;QAC/D,IAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAE7C,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YACjD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,gEAAU,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,SAAS,EACT,cAAc,IAAI,KAAI,CAAC,kBAAkB,EAAE,CAAC,cAAc,CAAC,OAAO,EAClE,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,0BAAU,GAAV,UAAW,MAA+B;QAA/B,oCAA+B;QACtC,OAAO,IAAI,CAAC,OAAO,CACf,gEAAU,EACR,MAAM,CACX,CAAC;IACN,CAAC;IAED,uBAAO,GAAP,UAAQ,MAAmB,EAAE,WAAmB,EAAE,MAA+B;QAAjF,iBAYC;QAZiD,oCAA+B;QAC7E,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACvE,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,qBAAqB,EACrB,KAAI,CAAC,aAAa,CAAC,OAAO,EAC1B,WAAW,EACX,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,6BAAa,GAArB,UAAsB,MAAmB,EAAE,MAA+B;QAA1E,iBAUC;QAV0C,oCAA+B;QACtE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACvE,MAAM,CAAC,KAAK,GAAG,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACvC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,cAAc,CACjB,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAAa,GAAb,UAAc,MAAmB,EAAE,MAA+B;QAAlE,iBAaC;QAbkC,oCAA+B;QAC9D,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAEpC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,KAAK,wEAA8B,EAAE;YAC/D,MAAM,CAAC,KAAK,GAAG,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,uBAAa;YACxC,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAC/B,UAAU,EACV,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,gCAAgB,GAAxB,UAAyB,UAAkB,EAAE,MAAe,EAAE,MAA0B;QAAxF,iBAkBC;QAjBG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAErC,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,mBAAmB,CAClD,UAAU,EACV,iEAA0B,CAAC,qBAAqB,EAChD,MAAM,CACT;SACJ,CAAC,CAAC,IAAI,CAAC,gBAAM;YACH,aAAS,GAAa,MAAM,GAAnB,EAAE,OAAO,GAAI,MAAM,GAAV,CAAW;YACpC,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAC3B,0BAA0B,EAC1B,OAAO,CACV,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAe,GAAf,UAAgB,UAAkB,EAAE,MAA2B;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED,qCAAqB,GAArB,UAAsB,UAAkB,EAAE,MAA2B;QACjE,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,wBAAQ,GAAR,UAAS,MAAmB,EAAE,EAAU,EAAE,MAA+B;QAA/B,oCAA+B;QACrE,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,KAAK,wEAA8B,EAAE;YAC/D,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,GAAG,+DAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;SACvC;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACL,YAAC;AAAD,CAAC,CAhK0B,yDAAW,GAgKrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtK0F;AACtC;AAER;AAE7C;IAA4B,0BAAW;IAEnC,gBACI,YAAoB,EACpB,QAAiB,EACjB,MAAgD,EAChD,SAAiC;eAGjC,kBAAM;YACF,QAAQ;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,aAAa;SACtB,EAAE,MAAM,EAAE,SAAS,CAAC;IACzB,CAAC;IAED;;;;;;;OAOG;IACH,+BAAc,GAAd,UAAe,WAAmB,EAAE,OAA4B;QAAhE,iBAUC;QATG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,CACd,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC,IAAI,CAAC,eAAK;YACT,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IACH,yCAAwB,GAAxB,UAAyB,KAAa,EAAE,WAAmB,EAAE,OAA4B;QAAzF,iBAUC;QATG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,qBAAqB,EACrB,WAAW,EACX,KAAK,CACR,CAAC;YAEF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,4BAAW,GAAX,UAAY,OAAwB,EAAE,WAAmB,EAAE,OAA4B;QAAvF,iBAaC;QAZG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,kBAAkB,EAClB,WAAW,EACX,KAAI,CAAC,kBAAkB,EAAE,CAAC,cAAc,CAAC,OAAO,EAChD,OAAO,CACV,CAAC;YAEF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAa,GAAb,UAAc,OAAwB,EAAE,OAAgC;QAAxE,iBAWC;QAXuC,sCAAgC;QACpE,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAGpC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,UAAU,EACV,+DAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAC3B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAAY,GAAZ;QACI,OAAO,IAAI,CAAC,cAAc,CACtB,iBAAiB,EACjB,iBAAiB,EACjB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CACrC,CAAC;IACN,CAAC;IAGO,iCAAgB,GAAxB,UAAyB,UAAkB,EAAE,MAAe,EAAE,MAA0B;QAAxF,iBAmBC;QAlBG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAErC,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,mBAAmB,CAClD,UAAU,EACV,iEAA0B,CAAC,sBAAsB,EACjD,MAAM,CACT;SACJ,CAAC,CAAC,IAAI,CAAC,gBAAM;YACH,aAAS,GAAa,MAAM,GAAnB,EAAE,OAAO,GAAI,MAAM,GAAV,CAAW;YACpC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAC3B,0BAA0B,EAC1B,OAAO,CACV,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gCAAe,GAAf,UAAgB,UAAkB,EAAE,MAA2B;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED,sCAAqB,GAArB,UAAsB,UAAkB,EAAE,MAA2B;QACjE,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,yBAAQ,GAAR,UAAS,OAAe,EAAE,IAAY,EAAE,EAAU,EAAE,MAA2B;QAC3E,OAAO,IAAI,CAAC,cAAc,CACtB,IAAI,EACJ,EAAE,EACF,OAAO,EACP,MAAM,CACT,CAAC;IACN,CAAC;IAED,6BAAY,GAAZ,UAAa,WAAmB;QAAhC,iBAaC;QAZG,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAO;YAChD,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;YAC1B,IAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBAC9B,QAAQ,CAAC,IAAI,CACT,KAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,WAAW,CAAC,CAChD,CAAC;aACL;YACD,OAAO,OAAO,CAAC,GAAG,CACd,QAAQ,CACX,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAGL,aAAC;AAAD,CAAC,CA3J2B,yDAAW,GA2JtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChK+B;AACE;AAC8C;AACgD;AAEpE;AAE5D;IAAkC,gCAAiC;IAAnE;;IA8FA,CAAC;IAvFG,2BAAI,GAAJ,UAAK,MAA2B;QAAhC,iBA0CC;QAzCG,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAC;YAC7B,IAAM,aAAa,GAAG,MAAM,CAAC,mBAAmB,CAAC;YACjD,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,MAAM,CAClC;gBACI,SAAS,EAAE,aAAa,CAAC,cAAc;gBACvC,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,cAAc,EAAE,aAAa,CAAC,mBAAmB;gBACjD,eAAe,EAAE,aAAa,CAAC,oBAAoB;aACtD,EACD,MAAM,CACT,CAAC;YAEF,IAAM,SAAS,GAAG,IAAI,+DAAS,CAC3B,MAAM,EACN,MAAM,CAAC,SAAS,CACnB,CAAC;YAEF,KAAI,CAAC,QAAQ,GAAG,IAAI,2DAAgB,CAChC,MAAM,EACN,MAAM,CAAC,QAAQ,CAClB,CAAC;YAEF,KAAI,CAAC,cAAc,GAAG,IAAI,yDAAc,CACpC,MAAM,EACN,MAAM,CAAC,cAAc,CACxB,CAAC;YAEF,KAAI,CAAC,QAAQ,GAAG,IAAI,8DAAQ,CACxB,MAAM,EACN,SAAS,CACZ,CAAC;YAEF,KAAI,CAAC,eAAe,GAAG,IAAI,0DAAe,CACtC,MAAM,EACN,MAAM,CAAC,eAAe,CACzB,CAAC;YAEF,OAAO,KAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oCAAa,GAArB;QACI,OAAO;YACH,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,eAAe,EAAE,IAAI,CAAC,eAAe;SACpB,CAAC;IAC1B,CAAC;IAED,4BAAK,GAAL,UAAM,YAAoB,EAAE,QAAkB;QAC1C,YAAY,GAAG,YAAY,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,wEAA8B,CAAC,CAAC,CAAC,YAAY,CAAC;QAElD,OAAO,IAAI,4CAAK,CACZ,YAAY,EACZ,QAAQ,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IACN,CAAC;IAED,6BAAM,GAAN,UAAO,YAAoB,EAAE,QAAkB;QAC3C,OAAO,IAAI,8CAAM,CACb,YAAY,EACZ,QAAQ,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IACN,CAAC;IAED,mCAAY,GAAZ,UAAa,MAAyB,EAAE,MAA2B;QAC/D,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CACpC,MAAM,EAAE,MAAM,CACjB,CAAC;IACN,CAAC;IAED,mCAAY,GAAZ,UAAa,MAAmB,EAAE,MAA0B;QACxD,OAAO,IAAI,4CAAK,CACZ,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAEL,mBAAC;AAAD,CAAC,CA9FiC,kEAAY,GA8F7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpG4I;AAClG;AAE3C;IAAiC,+BAA8B;IAK3D,qBACI,cAAkC,EAClC,MAAgD,EACtC,kBAA0C;QAHxD,YAKI,kBAAM,cAAc,EAAE,MAAM,CAAC,SAChC;QAHa,wBAAkB,GAAlB,kBAAkB,CAAwB;;IAGxD,CAAC;IAES,oCAAc,GAAxB,UAAyB,UAAkB,EAAE,YAAoB,EAAE,gBAAwB;QAA3F,iBAwBC;QAvBG,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,4EAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1C;QACD,IAAM,mBAAmB,GAAG;YACxB,IAAI,gBAAgB,EAAE;gBAClB,OAAO,4EAAc,CAAS,gBAAgB,CAAC,CAAC;aACnD;YACD,OAAO,KAAI,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;gBACjE,OAAO,QAAQ,CAAC,MAAM,CAClB,UAAU,CACb,CAAC,IAAI,EAAU,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QACF,OAAO,mBAAmB,EAAE,CAAC,IAAI,CAAC,iBAAO;YACrC,OAAO,IAAI,uDAAY,CACnB,KAAI,CAAC,MAAM,EACX,OAAO,EACP,YAAY,CACf,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAQ;YACZ,KAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;YAC3B,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kCAAY,GAAZ,UAAa,MAA2B;QACpC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,eAAe,CAAC,YAAY,CACzD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CACrC,CAAC;IACN,CAAC;IAEL,kBAAC;AAAD,CAAC,CA7CgC,+DAAS,GA6CzC;;;;;;;;;;;;;ACjDD,kD","file":"matic-plasma.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export const MATIC_TOKEN_ADDRESS_ON_POLYGON = '0x0000000000000000000000000000000000001010';\r\n","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\nexport class DepositManager extends BaseToken<IPlasmaClientConfig>{\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"DepositManager\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    get address() {\r\n        return this.contractParam.address;\r\n    }\r\n\r\n}","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class ErcPredicate extends BaseToken<IPlasmaClientConfig>{\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string, contractName: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: contractName\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n}","export * from \"./deposit_manager\";\r\nexport * from \"./erc20_predicate\";\r\nexport * from \"./registry\";\r\nexport * from \"./withdraw_manager\";","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class RegistryContract extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"Registry\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n}","import { BaseToken, ITransactionOption, BaseContractMethod, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class WithdrawManager extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"WithdrawManager\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    withdrawExit(tokens: string | string[], option?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            let method: BaseContractMethod;\r\n            if (Array.isArray(tokens)) {\r\n                method = contract.method(\"processExitsBatch\", tokens);\r\n            }\r\n            else {\r\n                method = contract.method(\"processExits\", tokens);\r\n            }\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n}","export * from \"./log_event_signature\";","export enum Plasma_Log_Event_Signature {\r\n    Erc20WithdrawEventSig = \"0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f\",\r\n    Erc721WithdrawEventSig = \"0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb\",\r\n}","import { TYPE_AMOUNT, Converter, Web3SideChainClient, ITransactionOption, MAX_AMOUNT, IApproveTransactionOption, ERROR_TYPE, IAllowanceTransactionOption } from \"@maticnetwork/maticjs\";\r\nimport { MATIC_TOKEN_ADDRESS_ON_POLYGON } from \"./constant\";\r\nimport { Plasma_Log_Event_Signature } from \"./enums\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { PlasmaToken } from \"./plasma_token\";\r\n\r\nexport class ERC20 extends PlasmaToken {\r\n\r\n    constructor(\r\n        tokenAddress: string,\r\n        isParent: boolean,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        contracts: () => IPlasmaContracts\r\n    ) {\r\n        const isMaticToken = tokenAddress === MATIC_TOKEN_ADDRESS_ON_POLYGON;\r\n        const contractIdentifier = isMaticToken ?\r\n            'MRC20' : 'ChildERC20';\r\n        super({\r\n            isParent,\r\n            address: tokenAddress,\r\n            name: contractIdentifier\r\n        }, client, contracts);\r\n    }\r\n\r\n    getPredicate() {\r\n        return this.fetchPredicate(\r\n            \"erc20Predicate\",\r\n            \"ERC20Predicate\",\r\n            this.client.config.erc20Predicate\r\n        );\r\n    }\r\n\r\n\r\n    getBalance(userAddress: string, option: ITransactionOption = {}) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"balanceOf\",\r\n                userAddress\r\n            );\r\n            return this.processRead<string>(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get allowance for user\r\n     *\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [option]\r\n     * @returns\r\n     * @memberof ERC20\r\n     */\r\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\r\n        const spenderAddress = option.spenderAddress;\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"allowance\",\r\n                userAddress,\r\n                spenderAddress || this.getHelperContracts().depositManager.address,\r\n            );\r\n            return this.processRead<string>(method, option);\r\n        });\r\n    }\r\n\r\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\r\n        const spenderAddress = option.spenderAddress;\r\n\r\n        if (!spenderAddress && !this.contractParam.isParent) {\r\n            this.client.logger.error(ERROR_TYPE.NullSpenderAddress).throw();\r\n        }\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"approve\",\r\n                spenderAddress || this.getHelperContracts().depositManager.address,\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n\r\n    }\r\n\r\n    approveMax(option: ITransactionOption = {}) {\r\n        return this.approve(\r\n            MAX_AMOUNT\r\n            , option\r\n        );\r\n    }\r\n\r\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption = {}) {\r\n        this.checkForRoot(\"deposit\");\r\n\r\n        return this.getHelperContracts().depositManager.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"depositERC20ForUser\",\r\n                this.contractParam.address,\r\n                userAddress,\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    private depositEther_(amount: TYPE_AMOUNT, option: ITransactionOption = {}) {\r\n        this.checkForRoot(\"depositEther\");\r\n\r\n        return this.getHelperContracts().depositManager.getContract().then(contract => {\r\n            option.value = Converter.toHex(amount);\r\n            const method = contract.method(\r\n                \"depositEther\",\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawStart(amount: TYPE_AMOUNT, option: ITransactionOption = {}) {\r\n        this.checkForChild(\"withdrawStart\");\r\n\r\n        if (this.contractParam.address === MATIC_TOKEN_ADDRESS_ON_POLYGON) {\r\n            option.value = Converter.toHex(amount);\r\n        }\r\n        return this.getContract().then(tokenContract => {\r\n            const method = tokenContract.method(\r\n                \"withdraw\",\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    private withdrawConfirm_(burnTxHash: string, isFast: boolean, option: ITransactionOption) {\r\n        this.checkForRoot(\"withdrawConfirm\");\r\n\r\n        return Promise.all([\r\n            this.getPredicate(),\r\n            this.getHelperContracts().exitUtil.buildPayloadForExit(\r\n                burnTxHash,\r\n                Plasma_Log_Event_Signature.Erc20WithdrawEventSig,\r\n                isFast\r\n            )\r\n        ]).then(result => {\r\n            const [predicate, payload] = result;\r\n            const method = predicate.method(\r\n                \"startExitWithBurntTokens\",\r\n                payload\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawConfirm(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, false, option);\r\n    }\r\n\r\n    withdrawConfirmFaster(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, true, option);\r\n    }\r\n\r\n    transfer(amount: TYPE_AMOUNT, to: string, option: ITransactionOption = {}) {\r\n        if (this.contractParam.address === MATIC_TOKEN_ADDRESS_ON_POLYGON) {\r\n            option.to = to;\r\n            option.value = Converter.toHex(amount);\r\n            return this.sendTransaction(option);\r\n        }\r\n        return this.transferERC20(to, amount, option);\r\n    }\r\n}\r\n","import { Converter, ITransactionOption, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { Plasma_Log_Event_Signature } from \"./enums\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { PlasmaToken } from \"./plasma_token\";\r\n\r\nexport class ERC721 extends PlasmaToken {\r\n\r\n    constructor(\r\n        tokenAddress: string,\r\n        isParent: boolean,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        contracts: () => IPlasmaContracts\r\n\r\n    ) {\r\n        super({\r\n            isParent,\r\n            address: tokenAddress,\r\n            name: 'ChildERC721'\r\n        }, client, contracts);\r\n    }\r\n\r\n    /**\r\n     * get tokens count for the user\r\n     *\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [options]\r\n     * @returns\r\n     * @memberof ERC721\r\n     */\r\n    getTokensCount(userAddress: string, options?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"balanceOf\",\r\n                userAddress\r\n            );\r\n            return this.processRead<number>(method, options);\r\n        }).then(count => {\r\n            return Number(count);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * returns token id on supplied index for user\r\n     *\r\n     * @param {number} index\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [options]\r\n     * @returns\r\n     * @memberof ERC721\r\n     */\r\n    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"tokenOfOwnerByIndex\",\r\n                userAddress,\r\n                index\r\n            );\r\n\r\n            return this.processRead<string>(method, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * safely deposit from parent to child\r\n     * \r\n     * @param tokenId \r\n     * @param options \r\n     */\r\n    safeDeposit(tokenId: string | number, userAddress: string, options?: ITransactionOption) {\r\n        this.checkForRoot(\"safeDeposit\");\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"safeTransferFrom\",\r\n                userAddress,\r\n                this.getHelperContracts().depositManager.address,\r\n                tokenId,\r\n            );\r\n\r\n            return this.processWrite(method, options);\r\n        });\r\n    }\r\n\r\n    withdrawStart(tokenId: string | number, options: ITransactionOption = {}) {\r\n        this.checkForChild(\"withdrawStart\");\r\n\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"withdraw\",\r\n                Converter.toHex(tokenId),\r\n            );\r\n            return this.processWrite(method, options);\r\n        });\r\n    }\r\n\r\n    getPredicate() {\r\n        return this.fetchPredicate(\r\n            \"erc721Predicate\",\r\n            \"ERC721Predicate\",\r\n            this.client.config.erc721Predicate\r\n        );\r\n    }\r\n\r\n\r\n    private withdrawConfirm_(burnTxHash: string, isFast: boolean, option: ITransactionOption) {\r\n        this.checkForRoot(\"withdrawConfirm\");\r\n\r\n        return Promise.all([\r\n            this.getPredicate(),\r\n            this.getHelperContracts().exitUtil.buildPayloadForExit(\r\n                burnTxHash,\r\n                Plasma_Log_Event_Signature.Erc721WithdrawEventSig,\r\n                isFast\r\n            )\r\n        ]).then(result => {\r\n            const [predicate, payload] = result;\r\n            console.log(\"address\", predicate.address);\r\n            const method = predicate.method(\r\n                \"startExitWithBurntTokens\",\r\n                payload\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawConfirm(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, false, option);\r\n    }\r\n\r\n    withdrawConfirmFaster(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, true, option);\r\n    }\r\n\r\n    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption) {\r\n        return this.transferERC721(\r\n            from,\r\n            to,\r\n            tokenId,\r\n            option\r\n        );\r\n    }\r\n\r\n    getAllTokens(userAddress: string) {\r\n        return this.getTokensCount(userAddress).then(balance => {\r\n            balance = Number(balance);\r\n            const promises = [];\r\n            for (let i = 0; i < balance; i++) {\r\n                promises.push(\r\n                    this.getTokenIdAtIndexForUser(i, userAddress)\r\n                );\r\n            }\r\n            return Promise.all(\r\n                promises\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n}\r\n","import { ERC20 } from \"./erc20\";\r\nimport { ERC721 } from \"./erc721\";\r\nimport { DepositManager, RegistryContract, WithdrawManager } from \"./contracts\";\r\nimport { BridgeClient, ExitUtil, ITransactionOption, RootChain, TYPE_AMOUNT, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { MATIC_TOKEN_ADDRESS_ON_POLYGON } from \"./constant\";\r\n\r\nexport class PlasmaClient extends BridgeClient<IPlasmaClientConfig> {\r\n\r\n    withdrawManager: WithdrawManager;\r\n\r\n    depositManager: DepositManager;\r\n    registry: RegistryContract;\r\n\r\n    init(config: IPlasmaClientConfig) {\r\n        const client = this.client;\r\n\r\n        return client.init(config).then(_ => {\r\n            const mainContracts = client.mainPlasmaContracts;\r\n            client.config = config = Object.assign(\r\n                {\r\n                    rootChain: mainContracts.RootChainProxy,\r\n                    registry: mainContracts.Registry,\r\n                    depositManager: mainContracts.DepositManagerProxy,\r\n                    withdrawManager: mainContracts.WithdrawManagerProxy,\r\n                },\r\n                config\r\n            );\r\n\r\n            const rootChain = new RootChain(\r\n                client,\r\n                config.rootChain\r\n            );\r\n\r\n            this.registry = new RegistryContract(\r\n                client,\r\n                config.registry,\r\n            );\r\n\r\n            this.depositManager = new DepositManager(\r\n                client,\r\n                config.depositManager\r\n            );\r\n\r\n            this.exitUtil = new ExitUtil(\r\n                client,\r\n                rootChain\r\n            );\r\n\r\n            this.withdrawManager = new WithdrawManager(\r\n                client,\r\n                config.withdrawManager,\r\n            );\r\n\r\n            return this;\r\n        });\r\n    }\r\n\r\n    private getContracts_() {\r\n        return {\r\n            depositManager: this.depositManager,\r\n            exitUtil: this.exitUtil,\r\n            registry: this.registry,\r\n            withdrawManager: this.withdrawManager\r\n        } as IPlasmaContracts;\r\n    }\r\n\r\n    erc20(tokenAddress: string, isParent?: boolean) {\r\n        tokenAddress = tokenAddress == null && !isParent ?\r\n            MATIC_TOKEN_ADDRESS_ON_POLYGON : tokenAddress;\r\n\r\n        return new ERC20(\r\n            tokenAddress,\r\n            isParent,\r\n            this.client,\r\n            this.getContracts_.bind(this)\r\n        );\r\n    }\r\n\r\n    erc721(tokenAddress: string, isParent?: boolean) {\r\n        return new ERC721(\r\n            tokenAddress,\r\n            isParent,\r\n            this.client,\r\n            this.getContracts_.bind(this)\r\n        );\r\n    }\r\n\r\n    withdrawExit(tokens: string | string[], option?: ITransactionOption) {\r\n        return this.withdrawManager.withdrawExit(\r\n            tokens, option\r\n        );\r\n    }\r\n\r\n    depositEther(amount: TYPE_AMOUNT, option: ITransactionOption) {\r\n        return new ERC20(\r\n            '', true, this.client,\r\n            this.getContracts_.bind(this)\r\n        )['depositEther__'](amount, option);\r\n    }\r\n\r\n}\r\n","import { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { BaseToken, promiseResolve, Web3SideChainClient, BaseContract, IContractInitParam, ITransactionOption } from \"@maticnetwork/maticjs\";\r\nimport { ErcPredicate } from \"./contracts\";\r\n\r\nexport class PlasmaToken extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    private predicate_: BaseContract;\r\n\r\n\r\n    constructor(\r\n        contractParam_: IContractInitParam,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        protected getHelperContracts: () => IPlasmaContracts\r\n    ) {\r\n        super(contractParam_, client);\r\n    }\r\n\r\n    protected fetchPredicate(methodName: string, contractName: string, predicateAddress: string): Promise<BaseContract> {\r\n        if (this.predicate_) {\r\n            return promiseResolve(this.predicate_);\r\n        }\r\n        const getPredicateAddress = () => {\r\n            if (predicateAddress) {\r\n                return promiseResolve<string>(predicateAddress);\r\n            }\r\n            return this.getHelperContracts().registry.getContract().then(contract => {\r\n                return contract.method(\r\n                    methodName\r\n                ).read<string>();\r\n            });\r\n        };\r\n        return getPredicateAddress().then(address => {\r\n            return new ErcPredicate(\r\n                this.client,\r\n                address,\r\n                contractName\r\n            ).getContract();\r\n        }).then(contract => {\r\n            this.predicate_ = contract;\r\n            return contract;\r\n        });\r\n    }\r\n\r\n    withdrawExit(option?: ITransactionOption) {\r\n        return this.getHelperContracts().withdrawManager.withdrawExit(\r\n            this.contractParam.address, option\r\n        );\r\n    }\r\n\r\n}","module.exports = require(\"@maticnetwork/maticjs\");"],"sourceRoot":""}