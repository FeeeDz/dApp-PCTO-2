import { ITransactionOption, Web3SideChainClient } from "@maticnetwork/maticjs";
import { IPlasmaClientConfig, IPlasmaContracts } from "./interfaces";
import { PlasmaToken } from "./plasma_token";
export declare class ERC721 extends PlasmaToken {
    constructor(tokenAddress: string, isParent: boolean, client: Web3SideChainClient<IPlasmaClientConfig>, contracts: () => IPlasmaContracts);
    /**
     * get tokens count for the user
     *
     * @param {string} userAddress
     * @param {ITransactionOption} [options]
     * @returns
     * @memberof ERC721
     */
    getTokensCount(userAddress: string, options?: ITransactionOption): Promise<number>;
    /**
     * returns token id on supplied index for user
     *
     * @param {number} index
     * @param {string} userAddress
     * @param {ITransactionOption} [options]
     * @returns
     * @memberof ERC721
     */
    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption): Promise<string>;
    /**
     *
     * safely deposit from parent to child
     *
     * @param tokenId
     * @param options
     */
    safeDeposit(tokenId: string | number, userAddress: string, options?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    withdrawStart(tokenId: string | number, options?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    getPredicate(): Promise<import("@maticnetwork/maticjs").BaseContract>;
    private withdrawConfirm_;
    withdrawConfirm(burnTxHash: string, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    withdrawConfirmFaster(burnTxHash: string, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    getAllTokens(userAddress: string): Promise<any[]>;
}
