{"version":3,"sources":["webpack://matic-plasma/webpack/bootstrap","webpack://matic-plasma/external \"@maticnetwork/maticjs\"","webpack://matic-plasma/./src/enums/log_event_signature.ts","webpack://matic-plasma/./src/contracts/deposit_manager.ts","webpack://matic-plasma/./src/contracts/erc20_predicate.ts","webpack://matic-plasma/./src/contracts/registry.ts","webpack://matic-plasma/./src/contracts/withdraw_manager.ts","webpack://matic-plasma/./src/plasma_token.ts","webpack://matic-plasma/./src/erc20.ts","webpack://matic-plasma/./src/constant.ts","webpack://matic-plasma/./src/erc721.ts","webpack://matic-plasma/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Plasma_Log_Event_Signature","client","address","isParent","this","contractParam","contractName","withdrawExit","tokens","option","getContract","then","contract","method","Array","isArray","processWrite","contractParam_","getHelperContracts","fetchPredicate","methodName","predicateAddress","predicate_","registry","read","ErcPredicate","withdrawManager","tokenAddress","contracts","contractIdentifier","getPredicate","config","erc20Predicate","getBalance","userAddress","processRead","getAllowance","spenderAddress","depositManager","approve","amount","logger","error","NullSpenderAddress","throw","toHex","approveMax","deposit","checkForRoot","depositEther_","withdrawStart","checkForChild","tokenContract","withdrawConfirm_","burnTxHash","isFast","Promise","all","exitUtil","buildPayloadForExit","Erc20WithdrawEventSig","result","predicate","payload","withdrawConfirm","withdrawConfirmFaster","transfer","to","sendTransaction","transferERC20","getTokensCount","options","count","Number","getTokenIdAtIndexForUser","index","safeDeposit","tokenId","erc721Predicate","Erc721WithdrawEventSig","console","log","from","transferERC721","getAllTokens","balance","promises","push","init","_","mainContracts","mainPlasmaContracts","assign","rootChain","RootChainProxy","Registry","DepositManagerProxy","WithdrawManagerProxy","RegistryContract","DepositManager","WithdrawManager","getContracts_","erc20","erc721","depositEther"],"mappings":"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","file":"matic-plasma.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"@maticnetwork/maticjs\");","export enum Plasma_Log_Event_Signature {\r\n    Erc20WithdrawEventSig = \"0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f\",\r\n    Erc721WithdrawEventSig = \"0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb\",\r\n}","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\nexport class DepositManager extends BaseToken<IPlasmaClientConfig>{\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"DepositManager\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    get address() {\r\n        return this.contractParam.address;\r\n    }\r\n\r\n}","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class ErcPredicate extends BaseToken<IPlasmaClientConfig>{\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string, contractName: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: contractName\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n}","import { BaseToken, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class RegistryContract extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"Registry\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n}","import { BaseToken, ITransactionOption, BaseContractMethod, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig } from \"../interfaces\";\r\n\r\n\r\nexport class WithdrawManager extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPlasmaClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"WithdrawManager\"\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    withdrawExit(tokens: string | string[], option?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            let method: BaseContractMethod;\r\n            if (Array.isArray(tokens)) {\r\n                method = contract.method(\"processExitsBatch\", tokens);\r\n            }\r\n            else {\r\n                method = contract.method(\"processExits\", tokens);\r\n            }\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n}","import { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { BaseToken, promiseResolve, Web3SideChainClient, BaseContract, IContractInitParam, ITransactionOption } from \"@maticnetwork/maticjs\";\r\nimport { ErcPredicate } from \"./contracts\";\r\n\r\nexport class PlasmaToken extends BaseToken<IPlasmaClientConfig> {\r\n\r\n    private predicate_: BaseContract;\r\n\r\n\r\n    constructor(\r\n        contractParam_: IContractInitParam,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        protected getHelperContracts: () => IPlasmaContracts\r\n    ) {\r\n        super(contractParam_, client);\r\n    }\r\n\r\n    protected fetchPredicate(methodName: string, contractName: string, predicateAddress: string): Promise<BaseContract> {\r\n        if (this.predicate_) {\r\n            return promiseResolve(this.predicate_);\r\n        }\r\n        const getPredicateAddress = () => {\r\n            if (predicateAddress) {\r\n                return promiseResolve<string>(predicateAddress);\r\n            }\r\n            return this.getHelperContracts().registry.getContract().then(contract => {\r\n                return contract.method(\r\n                    methodName\r\n                ).read<string>();\r\n            });\r\n        };\r\n        return getPredicateAddress().then(address => {\r\n            return new ErcPredicate(\r\n                this.client,\r\n                address,\r\n                contractName\r\n            ).getContract();\r\n        }).then(contract => {\r\n            this.predicate_ = contract;\r\n            return contract;\r\n        });\r\n    }\r\n\r\n    withdrawExit(option?: ITransactionOption) {\r\n        return this.getHelperContracts().withdrawManager.withdrawExit(\r\n            this.contractParam.address, option\r\n        );\r\n    }\r\n\r\n}","import { TYPE_AMOUNT, Converter, Web3SideChainClient, ITransactionOption, MAX_AMOUNT, IApproveTransactionOption, ERROR_TYPE, IAllowanceTransactionOption } from \"@maticnetwork/maticjs\";\r\nimport { MATIC_TOKEN_ADDRESS_ON_POLYGON } from \"./constant\";\r\nimport { Plasma_Log_Event_Signature } from \"./enums\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { PlasmaToken } from \"./plasma_token\";\r\n\r\nexport class ERC20 extends PlasmaToken {\r\n\r\n    constructor(\r\n        tokenAddress: string,\r\n        isParent: boolean,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        contracts: () => IPlasmaContracts\r\n    ) {\r\n        const isMaticToken = tokenAddress === MATIC_TOKEN_ADDRESS_ON_POLYGON;\r\n        const contractIdentifier = isMaticToken ?\r\n            'MRC20' : 'ChildERC20';\r\n        super({\r\n            isParent,\r\n            address: tokenAddress,\r\n            name: contractIdentifier\r\n        }, client, contracts);\r\n    }\r\n\r\n    getPredicate() {\r\n        return this.fetchPredicate(\r\n            \"erc20Predicate\",\r\n            \"ERC20Predicate\",\r\n            this.client.config.erc20Predicate\r\n        );\r\n    }\r\n\r\n\r\n    getBalance(userAddress: string, option: ITransactionOption = {}) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"balanceOf\",\r\n                userAddress\r\n            );\r\n            return this.processRead<string>(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get allowance for user\r\n     *\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [option]\r\n     * @returns\r\n     * @memberof ERC20\r\n     */\r\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\r\n        const spenderAddress = option.spenderAddress;\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"allowance\",\r\n                userAddress,\r\n                spenderAddress || this.getHelperContracts().depositManager.address,\r\n            );\r\n            return this.processRead<string>(method, option);\r\n        });\r\n    }\r\n\r\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\r\n        const spenderAddress = option.spenderAddress;\r\n\r\n        if (!spenderAddress && !this.contractParam.isParent) {\r\n            this.client.logger.error(ERROR_TYPE.NullSpenderAddress).throw();\r\n        }\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"approve\",\r\n                spenderAddress || this.getHelperContracts().depositManager.address,\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n\r\n    }\r\n\r\n    approveMax(option: ITransactionOption = {}) {\r\n        return this.approve(\r\n            MAX_AMOUNT\r\n            , option\r\n        );\r\n    }\r\n\r\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption = {}) {\r\n        this.checkForRoot(\"deposit\");\r\n\r\n        return this.getHelperContracts().depositManager.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"depositERC20ForUser\",\r\n                this.contractParam.address,\r\n                userAddress,\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    private depositEther_(amount: TYPE_AMOUNT, option: ITransactionOption = {}) {\r\n        this.checkForRoot(\"depositEther\");\r\n\r\n        return this.getHelperContracts().depositManager.getContract().then(contract => {\r\n            option.value = Converter.toHex(amount);\r\n            const method = contract.method(\r\n                \"depositEther\",\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawStart(amount: TYPE_AMOUNT, option: ITransactionOption = {}) {\r\n        this.checkForChild(\"withdrawStart\");\r\n\r\n        if (this.contractParam.address === MATIC_TOKEN_ADDRESS_ON_POLYGON) {\r\n            option.value = Converter.toHex(amount);\r\n        }\r\n        return this.getContract().then(tokenContract => {\r\n            const method = tokenContract.method(\r\n                \"withdraw\",\r\n                Converter.toHex(amount)\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    private withdrawConfirm_(burnTxHash: string, isFast: boolean, option: ITransactionOption) {\r\n        this.checkForRoot(\"withdrawConfirm\");\r\n\r\n        return Promise.all([\r\n            this.getPredicate(),\r\n            this.getHelperContracts().exitUtil.buildPayloadForExit(\r\n                burnTxHash,\r\n                Plasma_Log_Event_Signature.Erc20WithdrawEventSig,\r\n                isFast\r\n            )\r\n        ]).then(result => {\r\n            const [predicate, payload] = result;\r\n            const method = predicate.method(\r\n                \"startExitWithBurntTokens\",\r\n                payload\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawConfirm(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, false, option);\r\n    }\r\n\r\n    withdrawConfirmFaster(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, true, option);\r\n    }\r\n\r\n    transfer(amount: TYPE_AMOUNT, to: string, option: ITransactionOption = {}) {\r\n        if (this.contractParam.address === MATIC_TOKEN_ADDRESS_ON_POLYGON) {\r\n            option.to = to;\r\n            option.value = Converter.toHex(amount);\r\n            return this.sendTransaction(option);\r\n        }\r\n        return this.transferERC20(to, amount, option);\r\n    }\r\n}\r\n","export const MATIC_TOKEN_ADDRESS_ON_POLYGON = '0x0000000000000000000000000000000000001010';\r\n","import { Converter, ITransactionOption, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { Plasma_Log_Event_Signature } from \"./enums\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { PlasmaToken } from \"./plasma_token\";\r\n\r\nexport class ERC721 extends PlasmaToken {\r\n\r\n    constructor(\r\n        tokenAddress: string,\r\n        isParent: boolean,\r\n        client: Web3SideChainClient<IPlasmaClientConfig>,\r\n        contracts: () => IPlasmaContracts\r\n\r\n    ) {\r\n        super({\r\n            isParent,\r\n            address: tokenAddress,\r\n            name: 'ChildERC721'\r\n        }, client, contracts);\r\n    }\r\n\r\n    /**\r\n     * get tokens count for the user\r\n     *\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [options]\r\n     * @returns\r\n     * @memberof ERC721\r\n     */\r\n    getTokensCount(userAddress: string, options?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"balanceOf\",\r\n                userAddress\r\n            );\r\n            return this.processRead<number>(method, options);\r\n        }).then(count => {\r\n            return Number(count);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * returns token id on supplied index for user\r\n     *\r\n     * @param {number} index\r\n     * @param {string} userAddress\r\n     * @param {ITransactionOption} [options]\r\n     * @returns\r\n     * @memberof ERC721\r\n     */\r\n    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption) {\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"tokenOfOwnerByIndex\",\r\n                userAddress,\r\n                index\r\n            );\r\n\r\n            return this.processRead<string>(method, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * safely deposit from parent to child\r\n     * \r\n     * @param tokenId \r\n     * @param options \r\n     */\r\n    safeDeposit(tokenId: string | number, userAddress: string, options?: ITransactionOption) {\r\n        this.checkForRoot(\"safeDeposit\");\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"safeTransferFrom\",\r\n                userAddress,\r\n                this.getHelperContracts().depositManager.address,\r\n                tokenId,\r\n            );\r\n\r\n            return this.processWrite(method, options);\r\n        });\r\n    }\r\n\r\n    withdrawStart(tokenId: string | number, options: ITransactionOption = {}) {\r\n        this.checkForChild(\"withdrawStart\");\r\n\r\n\r\n        return this.getContract().then(contract => {\r\n            const method = contract.method(\r\n                \"withdraw\",\r\n                Converter.toHex(tokenId),\r\n            );\r\n            return this.processWrite(method, options);\r\n        });\r\n    }\r\n\r\n    getPredicate() {\r\n        return this.fetchPredicate(\r\n            \"erc721Predicate\",\r\n            \"ERC721Predicate\",\r\n            this.client.config.erc721Predicate\r\n        );\r\n    }\r\n\r\n\r\n    private withdrawConfirm_(burnTxHash: string, isFast: boolean, option: ITransactionOption) {\r\n        this.checkForRoot(\"withdrawConfirm\");\r\n\r\n        return Promise.all([\r\n            this.getPredicate(),\r\n            this.getHelperContracts().exitUtil.buildPayloadForExit(\r\n                burnTxHash,\r\n                Plasma_Log_Event_Signature.Erc721WithdrawEventSig,\r\n                isFast\r\n            )\r\n        ]).then(result => {\r\n            const [predicate, payload] = result;\r\n            console.log(\"address\", predicate.address);\r\n            const method = predicate.method(\r\n                \"startExitWithBurntTokens\",\r\n                payload\r\n            );\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawConfirm(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, false, option);\r\n    }\r\n\r\n    withdrawConfirmFaster(burnTxHash: string, option?: ITransactionOption) {\r\n        return this.withdrawConfirm_(burnTxHash, true, option);\r\n    }\r\n\r\n    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption) {\r\n        return this.transferERC721(\r\n            from,\r\n            to,\r\n            tokenId,\r\n            option\r\n        );\r\n    }\r\n\r\n    getAllTokens(userAddress: string) {\r\n        return this.getTokensCount(userAddress).then(balance => {\r\n            balance = Number(balance);\r\n            const promises = [];\r\n            for (let i = 0; i < balance; i++) {\r\n                promises.push(\r\n                    this.getTokenIdAtIndexForUser(i, userAddress)\r\n                );\r\n            }\r\n            return Promise.all(\r\n                promises\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n}\r\n","import { ERC20 } from \"./erc20\";\r\nimport { ERC721 } from \"./erc721\";\r\nimport { DepositManager, RegistryContract, WithdrawManager } from \"./contracts\";\r\nimport { BridgeClient, ExitUtil, ITransactionOption, RootChain, TYPE_AMOUNT, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\nimport { IPlasmaClientConfig, IPlasmaContracts } from \"./interfaces\";\r\nimport { MATIC_TOKEN_ADDRESS_ON_POLYGON } from \"./constant\";\r\n\r\nexport class PlasmaClient extends BridgeClient<IPlasmaClientConfig> {\r\n\r\n    withdrawManager: WithdrawManager;\r\n\r\n    depositManager: DepositManager;\r\n    registry: RegistryContract;\r\n\r\n    init(config: IPlasmaClientConfig) {\r\n        const client = this.client;\r\n\r\n        return client.init(config).then(_ => {\r\n            const mainContracts = client.mainPlasmaContracts;\r\n            client.config = config = Object.assign(\r\n                {\r\n                    rootChain: mainContracts.RootChainProxy,\r\n                    registry: mainContracts.Registry,\r\n                    depositManager: mainContracts.DepositManagerProxy,\r\n                    withdrawManager: mainContracts.WithdrawManagerProxy,\r\n                },\r\n                config\r\n            );\r\n\r\n            const rootChain = new RootChain(\r\n                client,\r\n                config.rootChain\r\n            );\r\n\r\n            this.registry = new RegistryContract(\r\n                client,\r\n                config.registry,\r\n            );\r\n\r\n            this.depositManager = new DepositManager(\r\n                client,\r\n                config.depositManager\r\n            );\r\n\r\n            this.exitUtil = new ExitUtil(\r\n                client,\r\n                rootChain\r\n            );\r\n\r\n            this.withdrawManager = new WithdrawManager(\r\n                client,\r\n                config.withdrawManager,\r\n            );\r\n\r\n            return this;\r\n        });\r\n    }\r\n\r\n    private getContracts_() {\r\n        return {\r\n            depositManager: this.depositManager,\r\n            exitUtil: this.exitUtil,\r\n            registry: this.registry,\r\n            withdrawManager: this.withdrawManager\r\n        } as IPlasmaContracts;\r\n    }\r\n\r\n    erc20(tokenAddress: string, isParent?: boolean) {\r\n        tokenAddress = tokenAddress == null && !isParent ?\r\n            MATIC_TOKEN_ADDRESS_ON_POLYGON : tokenAddress;\r\n\r\n        return new ERC20(\r\n            tokenAddress,\r\n            isParent,\r\n            this.client,\r\n            this.getContracts_.bind(this)\r\n        );\r\n    }\r\n\r\n    erc721(tokenAddress: string, isParent?: boolean) {\r\n        return new ERC721(\r\n            tokenAddress,\r\n            isParent,\r\n            this.client,\r\n            this.getContracts_.bind(this)\r\n        );\r\n    }\r\n\r\n    withdrawExit(tokens: string | string[], option?: ITransactionOption) {\r\n        return this.withdrawManager.withdrawExit(\r\n            tokens, option\r\n        );\r\n    }\r\n\r\n    depositEther(amount: TYPE_AMOUNT, option: ITransactionOption) {\r\n        return new ERC20(\r\n            '', true, this.client,\r\n            this.getContracts_.bind(this)\r\n        )['depositEther__'](amount, option);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}